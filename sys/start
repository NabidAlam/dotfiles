#!/usr/bin/env bash

# A lot of this is based on the excellent dotfiles scripts by
# Zach Holman. You can find it here: https://github.com/holman/dotfiles
# I wanted to customize it to add support for cross-platform dotfiles
# So I started from scratch but you should try his scripts because they are
# WAY better than mine :)

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd)
UNAME=$(uname)

set -e

echo ''

info () {
    printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
    printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
    printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
    printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
    echo ''
    exit
}

link_file () {
    local src=$1 dst=$2

    local overwrite= backup= skip=
    local action=

    if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
    then

        if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
        then

            local currentSrc="$(readlink $dst)"

            if [ "$currentSrc" == "$src" ]
            then

                skip=true;

            else

                user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
                    [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
                read -n 1 action

                case "$action" in
                    o )
                        overwrite=true;;
                    O )
                        overwrite_all=true;;
                    b )
                        backup=true;;
                    B )
                        backup_all=true;;
                    s )
                        skip=true;;
                    S )
                        skip_all=true;;
                    * )
                        ;;
                esac

            fi

        fi

        overwrite=${overwrite:-$overwrite_all}
        backup=${backup:-$backup_all}
        skip=${skip:-$skip_all}

        if [ "$overwrite" == "true" ]
        then
            rm -rf "$dst"
            success "removed $dst"
        fi

        if [ "$backup" == "true" ]
        then
            mv "$dst" "${dst}.backup"
            success "moved $dst to ${dst}.backup"
        fi

        if [ "$skip" == "true" ]
        then
            success "skipped $src"
        fi
    fi

    if [ "$skip" != "true" ]  # "false" or empty
    then
        ln -s "$1" "$2"
        success "linked $1 to $2"
    fi
}

install_dotfiles () {
    info 'installing dotfiles'

    local overwrite_all=false backup_all=false skip_all=false

    for src in $(find "$DOTFILES_ROOT/" -maxdepth 2 -name '*.symlink')
    do
        dst="$HOME/.$(basename "${src%.*}")"
        link_file "$src" "$dst"
    done

    for src in $(find "$DOTFILES_ROOT/" -maxdepth 2 -type f -name '*.copy')
    do
        dst="$HOME/.$(basename "${src%.*}")"
        (
        set +e
        cp -f "$src" "$dst"
        set -e
        )
        success "copied $src to $dst"
    done

    # Custom install scripts
    for src in $(find "$DOTFILES_ROOT/" -maxdepth 2 -type f -name '*.install.zsh')
    do
        source $src
    done
}

if cat /proc/version | grep Microsoft >/dev/null 2>&1; then
    WSL=1
else
    WSL=0
fi

if [ $WSL = "1" ]; then
    echo "Running in Windows Subsystem for Linux"

    # Symlink some useful directories
    WINHOME=/mnt/c/Users/$USER
    if [ -e $WINHOME ]; then
        [ ! -e ~/Winhome ] || rm ~/Winhome
        ln -s $WINHOME ~/Winhome
        success "symlinked $WINHOME to ~/Winhome"
    fi
    [ ! -e ~/Code ] || rm ~/Code
    ln -s ~/Winhome/Code ~/Code
    success "symlinked ~/Winhome/Code to ~/Code"
    [ ! -e ~/.ssh ] || rm -Rf ~/.ssh
    ln -s ~/Winhome/.ssh ~/.ssh
    success "symlinked ~/Winhome/.ssh to ~/.ssh"
fi

if ! [ -f git/gitconfig ]; then
    ./sys/gitconfig.sh
fi

install_dotfiles

# Configure shell
if type -p zsh >/dev/null 2>&1; then
    ZSH_PATH=$(type -p zsh)
    chsh -s $ZSH_PATH
    success "configured default shell as zsh"
else
    user "unable to configure default shell to zsh, it is not installed"
fi

echo ''
echo '  All installed!'
